# pandemic_predictor.py
from flask import Flask, render_template_string, request, jsonify
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from datetime import datetime

app = Flask(__name__)

# HTML Template (minimalistic design)
HTML_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>AI Pandemic Predictor</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        .chart-container { width: 100%; height: 400px; margin: 30px 0; }
        input, button { padding: 8px; margin: 5px 0; }
        nav { margin: 20px 0; }
        a { margin-right: 15px; text-decoration: none; color: #0066cc; }
    </style>
</head>
<body>
    <h1>ðŸ¦  AI Pandemic Prediction</h1>
    <nav>
        <a href="/">Home</a>
        <a href="#about">About</a>
    </nav>
    
    <div class="chart-container">
        <canvas id="outbreakChart"></canvas>
    </div>

    <div>
        <h3>Make Prediction</h3>
        <input type="date" id="predictionDate" value="{{ default_date }}">
        <button onclick="makePrediction()">Predict Cases</button>
        <div id="result" style="margin-top: 10px; font-weight: bold;"></div>
    </div>

    <div id="about" style="margin-top: 50px;">
        <h3>About This Project</h3>
        <p>This demo shows how AI can predict disease outbreaks using machine learning.</p>
        <p>Technologies used: Python, Flask, Scikit-learn, Chart.js</p>
    </div>

    <script>
        // Initialize chart
        const ctx = document.getElementById('outbreakChart').getContext('2d');
        const chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: {{ dates|safe }},
                datasets: [{
                    label: 'Historical Cases',
                    data: {{ cases|safe }},
                    borderColor: '#4e79a7',
                    backgroundColor: 'rgba(78, 121, 167, 0.1)',
                    fill: true
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    title: { display: true, text: 'Disease Outbreak Pattern' }
                }
            }
        });

        // Prediction function
        async function makePrediction() {
            const date = document.getElementById('predictionDate').value;
            if (!date) return alert('Please select a date');
            
            try {
                const response = await fetch('/predict', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({date})
                });
                const data = await response.json();
                document.getElementById('result').innerHTML = 
                    `ðŸ“ˆ Predicted cases for <strong>${date}</strong>: <span style="color:#e45756">${data.prediction.toLocaleString()}</span>`;
            } catch (error) {
                alert('Prediction failed. Please try again.');
            }
        }
    </script>
</body>
</html>
"""

# Generate sample outbreak data
def generate_outbreak_data():
    dates = pd.date_range(start='2023-01-01', periods=180)
    base_cases = np.sin(np.linspace(0, 10, 180)) * 5000 + 5000
    noise = np.random.normal(0, 800, 180)
    cases = np.abs(base_cases + noise).astype(int)
    return dates, cases

# Train prediction model
def train_model(dates, cases):
    df = pd.DataFrame({'date': dates, 'cases': cases})
    df['day_of_year'] = df['date'].dt.dayofyear
    model = RandomForestRegressor(n_estimators=50, random_state=42)
    model.fit(df[['day_of_year']], df['cases'])
    return model

# Initialize data and model
dates, cases = generate_outbreak_data()
model = train_model(dates, cases)

@app.route('/')
def home():
    default_date = datetime.now().strftime('%Y-%m-%d')
    return render_template_string(HTML_TEMPLATE, 
                                dates=[d.strftime('%Y-%m-%d') for d in dates],
                                cases=cases.tolist(),
                                default_date=default_date)

@app.route('/predict', methods=['POST'])
def predict():
    try:
        date_str = request.json['date']
        day_of_year = datetime.strptime(date_str, '%Y-%m-%d').timetuple().tm_yday
        prediction = model.predict([[day_of_year]])[0]
        return jsonify({'prediction': max(0, int(prediction))})
    except Exception as e:
        return jsonify({'error': str(e)}), 400

if __name__ == '__main__':
    app.run(debug=True)
